from pyrogram import Client, filters
from pyrogram.enums import ParseMode
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
import yt_dlp
import asyncio
import os
import json
from datetime import datetime, timedelta

API_ID = 23658294
API_HASH = "633518b64f17912bce4a8f65c4a48fb7"
BOT_TOKEN = "8057537136:AAGQC3Tlj8SPGnH1vtFOHI6vp2GA5Ej0D6M"
ADMIN_ID = 7183817298
CHANNEL_USERNAME = "testoviychannel11"

app = Client("tiktok_downloader_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

DOWNLOAD_DIR = "downloads"
if not os.path.exists(DOWNLOAD_DIR):
    os.makedirs(DOWNLOAD_DIR)

users_file = "users.json"
stats_file = "stats.json"

if not os.path.exists(users_file):
    with open(users_file, "w") as f:
        json.dump([], f)

if not os.path.exists(stats_file):
    with open(stats_file, "w") as f:
        json.dump({}, f)

def save_user(user_id):
    with open(users_file, "r") as f:
        users = json.load(f)
    if user_id not in users:
        users.append(user_id)
        with open(users_file, "w") as f:
            json.dump(users, f)

def get_users():
    with open(users_file, "r") as f:
        return json.load(f)

def save_download_stat():
    today_str = datetime.now().strftime("%Y-%m-%d")
    with open(stats_file, "r") as f:
        stats = json.load(f)

    stats[today_str] = stats.get(today_str, 0) + 1

    with open(stats_file, "w") as f:
        json.dump(stats, f)

def get_download_stats():
    with open(stats_file, "r") as f:
        stats = json.load(f)

    today = datetime.now().date()
    yesterday = today - timedelta(days=1)
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)

    total = sum(stats.values())
    today_count = stats.get(today.strftime("%Y-%m-%d"), 0)
    yesterday_count = stats.get(yesterday.strftime("%Y-%m-%d"), 0)
    week_count = sum(count for day, count in stats.items() if datetime.strptime(day, "%Y-%m-%d").date() >= week_ago)
    month_count = sum(count for day, count in stats.items() if datetime.strptime(day, "%Y-%m-%d").date() >= month_ago)

    return total, today_count, yesterday_count, week_count, month_count

async def check_subscription(user_id):
    try:
        member = await app.get_chat_member(f"@{CHANNEL_USERNAME}", user_id)
        return member.status not in ("left", "kicked")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@app.on_message(filters.command("start"))
async def start(client, message: Message):
    user_id = message.from_user.id
    save_user(user_id)

    if not await check_subscription(user_id):
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîî –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME}")]]
        )
        await message.reply(
            "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ /start —Å–Ω–æ–≤–∞.",
            reply_markup=keyboard
        )
        return

    await message.reply(
        "**üëã –ü—Ä–∏–≤–µ—Ç!**\n\n–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ TikTok, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.\n\n"
        "üì¨ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞: @shaha159",
        reply_markup=InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
                [InlineKeyboardButton("üì¨ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", url="https://t.me/shaha159")]
            ]
        ),
        parse_mode=ParseMode.MARKDOWN
    )

@app.on_callback_query()
async def callback(client, callback_query):
    data = callback_query.data
    user_id = callback_query.from_user.id
    print(f"[LOG] Callback data: {data} –æ—Ç user_id={user_id}")

    if data == "help":
        await callback_query.message.edit(
            "**üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n\n–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok-–≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞. –í–∏–¥–µ–æ –¥–æ 50 MB.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
            ),
            parse_mode=ParseMode.MARKDOWN
        )
        await callback_query.answer()
    elif data == "back":
        await callback_query.message.edit(
            "**üëã –ü—Ä–∏–≤–µ—Ç!**\n\n–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ TikTok, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.\n\n"
            "üì¨ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞: @shaha159",
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
                    [InlineKeyboardButton("üì¨ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", url="https://t.me/shaha159")]
                ]
            ),
            parse_mode=ParseMode.MARKDOWN
        )
        await callback_query.answer()
    else:
        await callback_query.answer()

@app.on_message(filters.text & filters.private & ~filters.command(["admin", "stats", "send"]))
async def download_tiktok(client, message: Message):
    user_id = message.from_user.id
    save_user(user_id)

    if not await check_subscription(user_id):
        await message.reply(
            f"‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @{CHANNEL_USERNAME}.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    url = message.text.strip()
    if not ("tiktok.com" in url or "vm.tiktok.com" in url):
        return await message.reply("üö´ –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ TikTok.")

    msg = await message.reply("üì• –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...")

    try:
        ydl_opts = {
            'format': 'mp4',
            'outtmpl': f'{DOWNLOAD_DIR}/%(title).50s.%(ext)s',
            'noplaylist': True,
            'quiet': True,
            'no_warnings': True,
            'merge_output_format': 'mp4',
            'max_filesize': 50 * 1024 * 1024,
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)

        await client.send_video(
            chat_id=message.chat.id,
            video=filename,
            caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ!\nüì• –í–∏–¥–µ–æ: {info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}"
        )
        save_download_stat()
        os.remove(filename)

    except yt_dlp.utils.DownloadError as e:
        await msg.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")
        print(f"[ERROR] DownloadError: {e}")
    except Exception as e:
        await msg.edit(f"‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:\n`{e}`")
        print(f"[ERROR] Exception –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")

@app.on_message(filters.command("admin"))
async def admin_panel(client, message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        total_users = len(get_users())
        total, today_count, yesterday_count, week_count, month_count = get_download_stats()

        await message.reply(
            "üõ† *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{total_users}*\n"
            f"üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ –≤–∏–¥–µ–æ: *{total}*\n\n"
            f"üìÖ –°–µ–≥–æ–¥–Ω—è: *{today_count}*\n"
            f"üìÖ –í—á–µ—Ä–∞: *{yesterday_count}*\n"
            f"üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: *{week_count}*\n"
            f"üìÖ –ó–∞ –º–µ—Å—è—Ü: *{month_count}*\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/send - –†–∞—Å—Å—ã–ª–∫–∞\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ /admin: {e}")

@app.on_message(filters.command("stats"))
async def stats(client, message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    total_users = len(get_users())
    total, today_count, yesterday_count, week_count, month_count = get_download_stats()

    await message.reply(
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{total_users}*\n"
        f"üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ –≤–∏–¥–µ–æ: *{total}*\n\n"
        f"üìÖ –°–µ–≥–æ–¥–Ω—è: *{today_count}*\n"
        f"üìÖ –í—á–µ—Ä–∞: *{yesterday_count}*\n"
        f"üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: *{week_count}*\n"
        f"üìÖ –ó–∞ –º–µ—Å—è—Ü: *{month_count}*",
        parse_mode=ParseMode.MARKDOWN
    )

@app.on_message(filters.command("send"))
async def broadcast(client, message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    await message.reply("‚úâÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

    try:
        response = await client.listen(message.chat.id, timeout=60)
        text = response.text
        users = get_users()

        count = 0
        for user_id in users:
            try:
                await client.send_message(user_id, text)
                count += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ user_id={user_id}: {e}")

        await message.reply(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    except asyncio.TimeoutError:
        await message.reply("‚åõ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

app.run()